@file:Suppress("unused")

package com.yoavst.euler.problems

import com.yoavst.euler.*
import kotlin.coroutines.experimental.buildSequence

/**
 * If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
 * Find the sum of all the multiples of 3 or 5 below 1000.
 */
fun problem1() {
    val sum = (1 until 1000).filter { it % 3 == 0 || it % 5 == 0 }.sum()
    println(sum)
}

/**
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */
fun problem2() {
    val fibo: Sequence<Int> = buildSequence {
        var f1 = 0
        var f2 = 1
        while (true) {
            yield(f2)
            val temp = f2
            f2 += f1
            f1 = temp
        }
    }
    val sum = fibo.takeWhile { it < 4_000_000 }.filter(Int::isEven).sum()
    println(sum)
}

/**
 * The prime factors of 13195 are 5, 7, 13 and 29.
 * What is the largest prime factor of the number 600851475143 ?
 */
fun problem3() {
    val num = 600851475143
    val largest = (3..num.sqrt() step 2).reversed().first { num % it == 0L && it.isPrime() }
    println(largest)
}

/**
 * A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
 * Find the largest palindrome made from the product of two 3-digit numbers.
 */
fun problem4() {
    val sequence: Sequence<Int> = buildSequence {
        for (m in 999 downTo 100) {
            for (n in 999 downTo 100) {
                yield(m * n)
            }
        }
    }
    val num = sequence.map(Int::toString).filter { it == it.reversed() }.maxBy(String::toInt)
    println(num)
}

/**
 * 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
 * What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
 */
fun problem5() {
    val numbers = (2..20)
    val result = firstInt(from = 2520, step = 20) { num -> numbers.all { num % it == 0 } }
    println(result)
}

/**
 * The sum of the squares of the first ten natural numbers is,
 * 1^2 + 2^2 + ... + 10^2 = 385
 * The square of the sum of the first ten natural numbers is,
 * (1 + 2 + ... + 10)^2 = 55^2 = 3025
 * Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
 *
 * Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
 */
fun problem6() {
    val sum = (1..100).sum().square() - (1..100).map { it * it }.sum()
    println(sum)
}

/**
 * By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
 * What is the 10 001st prime number?
 */
fun problem7() {
    val number = (3..Int.MAX_VALUE step 2).asSequence().filter(Int::isPrime).elementAt(9999)
    println(number)
}

/**
 * The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
 * Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
 */
fun problem8() {
    val data = """
    73167176531330624919225119674426574742355349194934
    96983520312774506326239578318016984801869478851843
    85861560789112949495459501737958331952853208805511
    12540698747158523863050715693290963295227443043557
    66896648950445244523161731856403098711121722383113
    62229893423380308135336276614282806444486645238749
    30358907296290491560440772390713810515859307960866
    70172427121883998797908792274921901699720888093776
    65727333001053367881220235421809751254540594752243
    52584907711670556013604839586446706324415722155397
    53697817977846174064955149290862569321978468622482
    83972241375657056057490261407972968652414535100474
    82166370484403199890008895243450658541227588666881
    16427171479924442928230863465674813919123162824586
    17866458359124566529476545682848912883142607690042
    24219022671055626321111109370544217506941658960408
    07198403850962455444362981230987879927244284909188
    84580156166097919133875499200524063689912560717606
    05886116467109405077541002256983155200055935729725
    71636269561882670428252483600823257530420752963450""".filter(Char::isDigit)

    var last: Long = data.take(13).map(Char::toIntValue).multiple()
    var max: Long = last
    try {
        for (i in 1 until data.length) {
            val dropped = data[i - 1].toIntValue()
            if (dropped == 0)
                last = data.drop(i).take(13).map(Char::toIntValue).multiple()
            else
                last = last / dropped * data[i + 12].toIntValue()
            max = maxOf(last, max)
        }
    } catch (ignored: Exception) {
    }

    println(max)
}

/**
 * A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
 * a^2 + b^2 = c^2
 * For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
 * There exists exactly one Pythagorean triplet for which a + b + c = 1000.
 * Find the product abc.
 */
fun problem9() {
    for (c in 0..999) {
        for (b in 0..999) {
            for (a in 0..999) {
                if (a + b + c == 1000 && a.square() + b.square() == c.square()) {
                    val product = a * b * c
                    println(product)
                    return
                }
            }
        }
    }
}

/**
 * The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
 * Find the sum of all the primes below two million.
 */
fun problem10() {
    val sum = 2 + generatePrimes(2_000_000).sum()
    println(sum)
}